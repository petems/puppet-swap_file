# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# swap_file_size_from_csv.rb
#
# ---- original file header ----
#
# @summary
#   Given a csv of swap files and sizes, split by pipe (||), we can determine the size in bytes of the swapfile
#Will return false if the swapfile is not found in the csv
#*Examples:*
#    get_swap_file_size_from_csv('/mnt/swap.1','/mnt/swap.1||1019900,/mnt/swap.1||1019900')
#Would return: 1019900
#    get_swap_file_size_from_csv('/mnt/swap.2','/mnt/swap.1||1019900,/mnt/swap.1||1019900')
#Would return: false
#
#
Puppet::Functions.create_function(:'swap_file::swap_file_size_from_csv') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    
    raise(Puppet::ParseError, "swap_file_size_from_csv(): Wrong number of arguments " +
      "given (#{arguments.size} for 2)") if arguments.size < 2
    unless arguments[0].is_a? String
      raise(Puppet::ParseError, "swap_file_size_from_csv(): swapfile name but be a string (Got #{arguments[0].class}")
    end
    unless arguments[1].is_a? String
      raise(Puppet::ParseError, "swap_file_size_from_csv(): Requires string to work with (Got #{arguments[1].class}")
    end
    lines = arguments[1].strip.split(',')

    swapfile_found = false

    lines.each do | swapfile_csv |
      swapfile_csv_array = swapfile_csv.split(',')
      swapfile_name = swapfile_csv.split('||')[0]
      swapfile_size = swapfile_csv.split('||')[1]
      swapfile_found = swapfile_size if arguments[0] == swapfile_name
    end
    swapfile_found
  
  end
end
